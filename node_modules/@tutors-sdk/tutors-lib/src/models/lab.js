"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const lo_1 = require("./lo");
const fs = __importStar(require("fs"));
const futils_1 = require("../utils/futils");
const path = __importStar(require("path"));
const sh = __importStar(require("shelljs"));
const glob = require('glob');
class Chapter {
    constructor() {
        this.title = '';
        this.shortTitle = '';
        this.contentMd = '';
        this.content = '';
        this.route = '';
    }
}
exports.Chapter = Chapter;
class Lab extends lo_1.LearningObject {
    constructor(parent) {
        super(parent);
        this.directories = [];
        this.chapters = [];
        this.reap();
        this.link = 'index.html';
        this.lotype = 'lab';
        if (fs.existsSync('videoid')) {
            this.videoid = futils_1.readFile('videoid');
        }
    }
    reapChapters(mdFiles) {
        const chapters = [];
        mdFiles.forEach((chapterName) => {
            const wholeFile = futils_1.readWholeFile(chapterName);
            let theTitle = wholeFile.substr(0, wholeFile.indexOf('\n'));
            theTitle = theTitle.replace('\r', '');
            const chapter = {
                file: chapterName,
                title: theTitle,
                shortTitle: chapterName.substring(chapterName.indexOf('.') + 1, chapterName.lastIndexOf('.')),
                contentMd: wholeFile,
                route: '',
                content: ''
            };
            chapters.push(chapter);
        });
        return chapters;
    }
    reap() {
        let mdFiles = glob.sync('*.md').sort();
        if (mdFiles.length === 0) {
            return;
        }
        const resourceName = path.parse(mdFiles[0]).name;
        super.reap(resourceName);
        this.directories = futils_1.getDirectories('.');
        this.chapters = this.reapChapters(mdFiles);
        this.title = this.chapters[0].shortTitle;
        this.img = futils_1.getImageFile('img/main');
    }
    publish(path) {
        sh.cd(this.folder);
        const labPath = path + '/' + this.folder;
        futils_1.initPath(labPath);
        this.directories.forEach((directory) => {
            futils_1.copyFolder(directory, labPath);
        });
        sh.cd('..');
    }
}
exports.Lab = Lab;
//# sourceMappingURL=lab.js.map