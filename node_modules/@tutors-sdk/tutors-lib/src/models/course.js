"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const lo_1 = require("./lo");
const loutils_1 = require("../utils/loutils");
const fs = __importStar(require("fs"));
const futils_1 = require("../utils/futils");
const topic_1 = require("./topic");
const version = require('../../package.json').version;
class Course extends lo_1.LearningObject {
    constructor(parent) {
        super(parent);
        this.los = [];
        this.walls = [];
        this.los = loutils_1.reapLos({ parent: this });
        this.lotype = 'course';
        this.reap('course');
        const ignoreList = this.properties.ignore;
        if (ignoreList) {
            const los = this.los.filter((lo) => ignoreList.indexOf(lo.folder) >= 0);
            los.forEach((lo) => {
                lo.hide = true;
            });
        }
        this.insertCourseRef(this.los);
        if (fs.existsSync('enrollment.yaml')) {
            this.enrollment = futils_1.readEnrollment('enrollment.yaml');
            if (this.enrollment) {
                console.log(`Enrolment file detected with ${this.enrollment.students.length} students`);
            }
        }
        if (fs.existsSync('calendar.yaml')) {
            this.calendar = futils_1.readCalendar('calendar.yaml');
            if (this.enrollment) {
                console.log(`Calendar file detected.`);
            }
        }
        this.walls.push({ course: this, isWall: true, los: loutils_1.findLos(this.los, 'talk') });
        this.walls.push({ course: this, isWall: true, los: loutils_1.findLos(this.los, 'lab') });
        this.walls.push({ course: this, isWall: true, los: loutils_1.findLos(this.los, 'video') });
        this.walls.push({ course: this, isWall: true, los: loutils_1.findLos(this.los, 'panelvideo') });
        this.walls.push({ course: this, isWall: true, los: loutils_1.findLos(this.los, 'github') });
        this.walls.push({ course: this, isWall: true, los: loutils_1.findLos(this.los, 'archive') });
    }
    insertCourseRef(los) {
        los.forEach((lo) => {
            lo.course = this;
            if (lo instanceof topic_1.Topic) {
                this.insertCourseRef(lo.los);
            }
        });
        this.course = this;
    }
    publish(path) {
        console.log(':: ', this.title);
        futils_1.copyFileToFolder(this.img, path);
        loutils_1.publishLos(path, this.los);
    }
}
exports.Course = Course;
//# sourceMappingURL=course.js.map